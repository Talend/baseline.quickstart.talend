//!!!!!
// This property file lists the different options for each Talend component.
// The options are grouped by components and categories.
// For some components, the category/section 'dependencies' represents the list of dependencies
// to pre install before the component itself
//
// IMPORTANT: On Windows platform any file system path should conforms to java notation
// The '\' should be escaped with '\'
//  path = "c:\mydir\myfile"    --> wrong
//  path = "c:\\mydir\\myfile"  --> right
//  path = "c:/mydir/myfile"    --> better: Platform independent
//
// A property can reference another property only if it has been defined before being used
// Ex:
//  root= "c:/mydir/"
//  dirs {
//      path1 = root + "/myfile"         --> right
//      path2 = "$root/myfile"           --> "groovyER" ;-)
//      path3 = "$root/myfile-$version"  --> wrong. 'version' defined after path3 (see below)
//  }
//  conf.path = "$dirs.path3/conf"       --> Property reference must be qualified based on the definition scope.
//  version = '1.0'
//

// Common talend ssl_truststore to share among all the components
// If it doesn't exist, it will be created as a copy of the default cacerts java truststore
// it can then be used to add any certificate (public key) used by Talend components
// Ex:
// - ldap certificate for tac, ..
// - git certificate for tac, studio.
// - database certificate for tac, iam, amc, trm, ...
// - Hadoop cluster certificates for studio, ..
// ....


// -----------------------------------
//
// Quickstart Modifications
//
// set amc.deploy_to_tac to false to allow successful download of talend binaries
//
// -----------------------------------


ssl_trustore {
  path   = "$INSTALL_ROOT_FOLDER/talend_SSLTrustStore"
}

amc {
  dependencies = []

  // If true, the amc war file will be deploy to the tac tomcat instance. See tac for more info.
  //      - The amc 'app_server' section won't be used.
  // If false, amc will be deploy to its own tomcat instance using the 'app_server' section information.
  deploy_to_tac = false

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "amc"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.monitoring?.host}"

      ports {
        http = 8085
        ajp = 8409
        shutdown = 8405
      }

      webapp {
        name = "amc"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend Activity Monitoring Console 6.4.1"
        description = "Talend Activity Monitoring Console is an add-on tool integrated in the studio and in Talend Administration Center for monitoring Talend Jobs and projects."

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8444
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }

      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}/${webapp.name}"
    }
  }

  database {
    create.schema = false

    // Databases supported out of the box : "mariadb", "mysql",  "oracle" and "sqlserver"
    // Value is read from the host.conf file from the 'monitoring' section. If not available default to 'mysql'
    // !! Recommended!! Change the value in hosts.conf instead than here.
    type = "${(HOSTS.monitoring?.database.type) ?: 'mysql'}"

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]

      //!! Important: The database schema must exist when amc starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 3306
      username = "${(HOSTS.monitoring?.database.user) ?: 'admin'}"
      // Default password: 'admin'
      password = "${(HOSTS.monitoring?.database.password) ?: 'admin'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:mariadb://${host}:${port}/${schema}?useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]

      //!! Important: The database schema must exist when amc starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 3306
      username = "${(HOSTS.monitoring?.database.user) ?: 'admin'}"
      // Default password: 'admin'
      password = "${(HOSTS.monitoring?.database.password) ?: 'admin'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}"

      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
//          "database.driver.Oracle"
      ]

      //!! Important: The database schema must exist when amc starts the first time
      service_name = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 1521
      username = "${(HOSTS.monitoring?.database.user) ?: 'SYSTEM'}"
      // Default password: 'MANAGER'
      password = "${(HOSTS.monitoring?.database.password) ?: 'MANAGER'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]

      //!! Important: The database schema must exist when amc starts the first time
      schema = "${(HOSTS.monitoring?.database.schema_service) ?: 'amc'}"

      host = "${(HOSTS.monitoring?.database.host) ?: 'localhost'}"
      port = (HOSTS.monitoring?.database.port) ?: 1433
      username = "${(HOSTS.monitoring?.database.user) ?: 'sa'}"
      // Default password: 'sa'
      password = "${(HOSTS.monitoring?.database.password) ?: 'sa'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

//      url = "jdbc:jtds:sqlserver://$host:$port/$schema"
      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }
}

cmdline {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.build?.host}"
  port = 8002

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline"
    generation = "$INSTALL_DATA_FOLDER/cmdline/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-cmdline-6.4.1"
    display = "Talend CommandLine 6.4.1"
    description = "Talend CommandLine 6.4.1"

    config = HOSTS.services
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      host = "${HOSTS.logging?.host}"
      port = 8056
    }
  }

}

// Secondary CommandLine
cmdline_s {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.build?.host}"
  port = 8003

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline_s"
    generation = "$INSTALL_DATA_FOLDER/cmdline_s/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline_s/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline_s/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline_s/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-secondary-cmdline-6.4.1"
    display = "Talend Secondary CommandLine 6.4.1"
    description = "Talend Secondary CommandLine 6.4.1"

    config = HOSTS.services
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline-secondary/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      port = 8056
    }
  }

}

// CommandLine dedicated to Continuous Integration
cmdline_ci {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.ci?.host}"
  port = 8002

  folders {
    home = "$INSTALL_TALEND_FOLDER/cmdline_ci"
    generation = "$INSTALL_DATA_FOLDER/cmdline_ci/exports"
    component = "$INSTALL_DATA_FOLDER/cmdline_ci/components"
    workspaces = "$INSTALL_DATA_FOLDER/cmdline_ci/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/cmdline_ci/studio/configuration"
  }

  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"

  service {
    name = "talend-ci-cmdline-6.4.1"
    display = "Talend CommandLine 6.4.1 - CI"
    description = "Talend Commandline 6.4.1 dedicated to Continuous Integration "

    // Overwrite default behaviour. Don't start cmdline as a service by default
    // as it's used, usually, with 'local-generate' Maven goal.
    config {
      // !!Recommended: Uses by default the owner of the installation folders
      // Linux Only
      user = "${HOSTS.services.user}"

      // !!Recommended: Uses by default the owner group of the installation folders
      // Linux Only
      group = "${HOSTS.services.password}"

      // !!Recommended: By default, install all services
      install = true
      // !!Recommended: By default, start all services after the installation
      start = false
    }
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/cmdline_ci/logging"
      path = "$folder/cmdline.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      port = 8056
    }
  }
}

studio {
  folders {
    home = "$INSTALL_TALEND_FOLDER/studio"
    workspaces = "$INSTALL_DATA_FOLDER/studio/workspaces"
    configuration = "$INSTALL_DATA_FOLDER/studio/studio/configuration"
  }
  // Workspace folder = folders.workspaces + '/' + workspace
  workspace = "workspace"
}

nexus {
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.ci?.host}"
  port = 8081

  url = "http://$host:$port/nexus"

  username = "admin"
  password = "3H7PqFGozhMb6mR8C1Rc/A==,Encrypt"

  user {
    create = false
    userId = nexus.username
    password = nexus.password
    firstname = 'Talend'
    lastname = 'admin'
    email = 'admin@company.com'
    roles = ['nx-admin']
  }

  releases = "releases"
  snapshots = "snapshots"
  group = "org.example"

  folders {
    home          = "$INSTALL_TALEND_FOLDER/nexus"
    migration     = "${home}/upgrade"
    sonatype_work = "$INSTALL_DATA_FOLDER/nexus/sonatype-work"
    logs          = "$INSTALL_DATA_FOLDER/nexus/logs"
    tmp           = "$INSTALL_DATA_FOLDER/nexus/tmp"
  }

  service {
    name = "nexus"
    display = "Sonatype Nexus Artifact Repository"
    description = "Sonatype Nexus Artifact Repository used by Talend"

    config = HOSTS.services
  }
}

tac {
  dependencies = [
      // Optional for windows based install
      //"database.server.MySQL", // Download & Install MySQL Server
      //"database.client.DBeaver",  // Database workbench: Replace MySQL & MariaDB Workbench, ...
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "tac"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.admin?.host}"

      ports {
        http = 8080
        ajp = 8089
        shutdown = 8005
      }

      set_env {
        // See:
        // http://www.baeldung.com/jvm-parameters
        // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
        JAVA_OPTS = [
            '-Xms1g',  // Initial memory allocation
            '-Xmx4g',  // Maximum memory allocation.
            // Garbage collection
            '-XX:+UseG1GC',  // Use G1, recommended for Xmx > 4g
//            '-XX:+UseConcMarkSweepGC',  // Other alternative for GC
            '-XX:+UseStringDeduplication', // Introduced in Java 8u20.
            //
            '-Djava.awt.headless=true',
            '-Djava.security.egd=file:/dev/./urandom',
        ]

        CATALINA_OPTS = []
      }

      // Add instance monitoring capability
      // Activated if HOST.admin.jvm_monitoring = true
      monitoring {
        activate = (HOSTS.admin?.jvm_monitoring) ?: false
        // If monitoring.activate = true,
        //  additional JAVA_OPTS variables are set
        JAVA_OPTS = [
            '-Dcom.sun.management.jmxremote=true',
            '-Dcom.sun.management.jmxremote.port=3614',
            '-Dcom.sun.management.jmxremote.authenticate=false',
            '-Dcom.sun.management.jmxremote.ssl=false',
            "-Djava.rmi.server.hostname=${instance.host}", // Add this to truly enable JMX on AWS
            '-Djava.rmi.server.port=1099'
        ]
      }

      webapp {
        name = "org.talend.administrator"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend Administration Center 6.4.1"
        description = "Web admin interface for Talend server. Enables scheduling and monitoring of Talend jobs. Access the tac console through http://localhost:${tac.app_server.instance.ports.http}/${tac.app_server.instance.webapp.name}"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }

        add_talend_ssltruststore = false
      }

      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}/${webapp.name}"
    }
  }

  // Database
  database {
    config.password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"

    // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle", "postgresql" and "sqlserver"
    // Value is read from the host.conf file from the 'admin' section. If not available default to 'mysql'
    // !! Recommended!! Change the value in hosts.conf instead than here.
    type = "${(HOSTS.admin?.database.type) ?: 'mysql'}"

    h2 {
      dependencies = []

      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      username = "${(HOSTS.admin?.database.user) ?: 'tisadmin'}"
      // Default password: 'tisadmin'
      password = "${(HOSTS.admin?.database.password) ?: 'tisadmin'}"

      db_folder     = "${INSTALL_DATA_FOLDER}/${app_server.instance.name}/administrator/database"
      backup_folder = "${db_folder}/backups/"

      url = "jdbc:h2:${db_folder}/${schema};MV_STORE=FALSE;MVCC=TRUE;AUTO_SERVER=TRUE;lock_timeout=15000"

      driver = "org.h2.Driver"
    }

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema   = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host     = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port     = (HOSTS.admin?.database.port) ?: 3306
      username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
      // Default password: 'admin'
      password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      url    = "jdbc:mariadb://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 3306
      username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
      // Default password: 'admin'
      password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}"

      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
          //"database.driver.Oracle"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      service_name = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1521
      username = "${(HOSTS.admin?.database.user) ?: 'SYSTEM'}"
      // Default password: 'MANAGER'
      password = "${(HOSTS.admin?.database.password) ?: 'MANAGER'}"

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    postgresql {
      dependencies = [
          "database.driver.postgresql"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 5432
      username = "${(HOSTS.admin?.database.user) ?: 'postgres'}"
      // Default password: 'sa'
      password = "${(HOSTS.admin?.database.password) ?: ''}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:postgresql://${host}:${port}/${schema}?loginTimeout=${connect_timeout}"

      driver = "org.postgresql.Driver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1433
      username = "${(HOSTS.admin?.database.user) ?: 'sa'}"
      // Default password: 'sa'
      password = "${(HOSTS.admin?.database.password) ?: 'sa'}"

      connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }

  // High Availability
  ha {
    // turned on by default
    enable = true
    cluster {
      name = "MyClusteredScheduler"
      check_interval = 20000
    }
  }

  default_account {
    login     = "security@company.com"
    password  = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    firstname = "security"
    lastname  = "security"
    type      = "NPA" // No Project Access
  }

  upgrade {
    active = false
    migration_reports_path = "$INSTALL_DATA_FOLDER/${app_server.instance.name}/administrator/upgrade/reports"
  }

  audit {
    database {
      // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle" and "sqlserver"
      type = "${(HOSTS.admin?.database.type) ?: 'mysql'}"

      h2 {
        dependencies = []

        schema = "talend_audit"

        username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
        // Default password: 'admin'
        password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

        db_folder = "$INSTALL_DATA_FOLDER/$app_server.instance.name/administrator/audit/database"

        url = "jdbc:h2:${db_folder}/${schema}"

        driver = "org.h2.Driver"
      }

      mariadb {
        dependencies = [
            "database.driver.mariadb"
        ]

        //!! Important: The database schema must exist when tac starts the first time
        schema   = "talend_audit"

        host     = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
        port     = (HOSTS.admin?.database.port) ?: 3306
        username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
        // Default password: 'admin'
        password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

        connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

        url    = "jdbc:mariadb://${host}:${port}/${schema}?&useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
        driver = "org.mariadb.jdbc.Driver"
      }

      mysql {
        dependencies = [
            "database.driver.mysql"
        ]

        schema = "talend_audit"

        host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
        port = (HOSTS.admin?.database.port) ?: 3306
        username = "${(HOSTS.admin?.database.user) ?: 'admin'}"
        // Default password: 'admin'
        password = "${(HOSTS.admin?.database.password) ?: 'admin'}"

        connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

        // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
        url = "jdbc:mysql://${host}:${port}/${schema}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}"

        driver = "com.mysql.jdbc.Driver"
      }

      oracle {
        //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
        dependencies = [
            "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
            //"database.driver.Oracle"
        ]

        //!! Important: The database schema must exist when tac starts the first time
        service_name = "talend_audit"

        host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
        port = (HOSTS.admin?.database.port) ?: 1521
        username = "${(HOSTS.admin?.database.user) ?: 'SYSTEM'}"
        // Default password: 'MANAGER'
        password = "${(HOSTS.admin?.database.password) ?: 'MANAGER'}"

        connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

        url = "jdbc:oracle:thin:@$host:$port:$service_name"
        // Long format
        // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

        driver = "oracle.jdbc.driver.OracleDriver"
      }

      postgresql {
        dependencies = [
            "database.driver.postgresql"
        ]

        //!! Important: The database schema must exist when tac starts the first time
        schema = "talend_audit"

        host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
        port = (HOSTS.admin?.database.port) ?: 5432
        username = "${(HOSTS.admin?.database.user) ?: 'postgres'}"
        // Default password: 'sa'
        password = "${(HOSTS.admin?.database.password) ?: ''}"

        connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

        url = "jdbc:postgresql://${host}:${port}/${schema}?loginTimeout=${connect_timeout}"

        driver = "org.postgresql.Driver"
      }

      sqlserver {
        dependencies = [
            "database.driver.sqlserver"
        ]

        //!! Important: The database schema must exist when tac starts the first time
        schema = "talend_audit"

        host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
        port = (HOSTS.admin?.database.port) ?: 1433
        username = "${(HOSTS.admin?.database.user) ?: 'sa'}"
        // Default password: 'sa'
        password = "${(HOSTS.admin?.database.password) ?: 'sa'}"

        connect_timeout = "${(HOSTS.monitoring?.database.connect_loggin_timeout) ?: 5}"

        url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

        driver = "net.sourceforge.jtds.jdbc.Driver"
      }
    }

    reports_path = "$INSTALL_DATA_FOLDER/$app_server.instance.name/administrator/audit/reports"
  }

  commandLine {
    primary {
      host = cmdline.host
      port = cmdline.port

      generation.folder = cmdline.folders.generation
      component.folder  = cmdline.folders.component
    }
    secondary {
      host = cmdline_s.host
      port = cmdline_s.port

      generation.folder = cmdline_s.folders.generation
      component.folder  = cmdline_s.folders.component
    }
  }

  monitoring {
    _amc {
      // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
      host = amc.app_server.instance.host
      port = amc.app_server.instance.ports.http
      name = amc.app_server.instance.webapp.name
    }

    kibana {
      // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      port = 5601
    }
  }

  repository {
    // Refers to the nexus configuration defined above
    def _NEXUS = nexus
    nexus {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = _NEXUS.host
      port = _NEXUS.port

      url = _NEXUS.url

      username = _NEXUS.username
      password = _NEXUS.password

      releases = _NEXUS.releases
      snapshots = _NEXUS.snapshots
      group = _NEXUS.group
    }
  }

  jobconductor {
    generated.job.folder  = "${INSTALL_DATA_FOLDER}/${app_server.instance.name}/jobconductor/generatedJobs"
    tasks.logs.folder     = "${INSTALL_DATA_FOLDER}/${app_server.instance.name}/jobconductor/executionLogs"

    max.execution.log     = "1000"
    max.age.log           = "0"
    max.generated.job     = "1000"
    max.age.generated.job = "0"
  }

  ldap {
    active = false
    ssl   = false

    host  = "ldaphost"
    port  = 389

    principal.dn.prefix = ""
    admin.password      = ""

    use.ldap.loginpwd = true

    fields {
      login     = ""
      email     = ""
      firstname = ""
      lastname  = ""

      svn.login = ""
      svn.pwd   = ""
      git.login = ""
      git.pwd   = ""
    }
  }

  logging {
    folder = "$INSTALL_DATA_FOLDER/$app_server.instance.name/administrator/logging"

    technical.log.threshold = "WARN"
    technical.log.path      = "$folder/technical.log"
    business.log.path       = "$folder/business.log"

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      port = 8050
    }
  }

  smtp {
    active = false

    host         = "smtp.company.com"
    port         = 25
    require.tls  = false
    require.ssl  = false
    username     = ""
    password     = ""
    from.address = ""
  }

  softwareupdate {
    talend {
      url      = "https://talend-update.talend.com/nexus"
      username = ""
      password = ""
    }

    local {
      url = "$tac.repository.nexus.url"

      deployment {
        username = "talend-updates-admin"
        password = "T5PhW2EfFqcVlqzAqldQvs43KDm0CpmZVQlS/Ccbbs4=,Encrypt"
      }

      reader {
        username = ""
        password = ""
      }

      repository_id = "talend-updates"
    }
  }

  svn {
    whiteListBranches = true

    host = "localhost"
    port = "80"
    root = "svn"

    repository = "talend"

    url      = "http://$host:$port/$root/$repository"
    username = "tisadmin"
    password = "0WUBePLsxz4E5vlhuVaXHg==,Encrypt"
    commit.log.pattern = "{0}"
  }

  git {
    whiteListBranches = true

    host = "localhost"
    port = "80"

    repository = "talend"

    url      = "http://$host:$port/$repository"
    username = "tisadmin"
    password = "0WUBePLsxz4E5vlhuVaXHg==,Encrypt"
    commit.log.pattern = "{0}"
  }

  libraries {
    type = "nexus" // default for version > 6.X

    nexus {
      url = "$tac.repository.nexus.url"
      username = "talend-custom-libs-admin"
      password = "4DkWDBdg2cy5qK63FwnhjOnIj7mEbHwOCqIgLCGhc1s=,Encrypt"

      repository_snapshots = "talend-custom-libs-snapshot"
      repository_releases = "talend-custom-libs-release"
    }

    //!!! IMPORTANT: SVN support has been deprecated in version 6.4.1
    //               SVN support expected to be removed in future versions
    svn {
      repository = "talendlibrary"

      url = "http://$tac.svn.host:$tac.svn.port/$tac.svn.root/$repository"
      username = "tisadmin"
      password = "0WUBePLsxz4E5vlhuVaXHg==,Encrypt"
    }
  }

  login_page {
    force.logout = true
  }

  sso {
    active = false

    sp_entity_id = "/ssologin"

    ip_product   = "Okta" // Or "SiteMinder"

    okta {
      organization_url = "https://{organization}.okta.com"
      embedLink        = ""
    }

    siteminder {
      service_url = ""
    }

    role_mapping {
      active = true

      project_types {
        mdm = 'MDM'
        dq  = 'DQ'  // DM: Data Management
        di  = 'DI'
        npa = 'NPA' // NPA : No Project Access
      }

      tac {
        security_admin    = ""
        administrator     = ""
        operation_manager = ""
        designer          = ""
        viewer            = ""
      }

      tdp {
        administrator   = ""
        data_preparator = ""
        dataset_manager = ""
      }

      tds {
        data_steward   = ""
        campaign_owner = ""
      }
    }
  }
}

jobserver {
  // Name of the current jobserver  value used for the installation directory (see folders.home below)
  // If multiple jobserver  are required on the same host, make multiple installation with a different name
  name = "jobserver"

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${jobserver.name}"
    data = "$INSTALL_DATA_FOLDER/${jobserver.name}/TalendJobServersFiles"
  }
  // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
  host = "${HOSTS.runtime?.host}"

  ports {
    command = 8000
    file = 8001
    monitoring = 8888
  }

  ssl {
    // If true. JobServer communicates with clients (TAC, Studio) through a "secured" connection.
    // JobServer uses by default the SSLKeystore file located at <jobserver install folder>/agent/keystore/SSLkeystore
    // If another certificate need to be used. Manually create a keystore and import or create a new certificate.
    // Then update the start_rs.sh/bat (MY_JMV_ARGS="-DJavax.net.ssl.keystore=) with the new keystore.
    // !! TAC and Studio must share the same keystore. Copy this file to the appropriate location.
    // Registration of the JobServer in TAC uses this SSL if active.
    // The SSL certificate
    active = false
  }

  max_connection = 1000

  service {
    name = "talend-${jobserver.name}-6.4.1"
    display = "Talend Job Server 6.4.1"
    description = "Enables execution of Talend jobs on this server. Talend Remote Job Server is used by tac for running remote jobs."

    config = HOSTS.services
  }

  cleaning {
    frequency = 600 // In sec
    logs {
      retention = 90   // In Days
      max = 1000       // Total logs file to keep before cleaning
    }
    jobs {
      retention = 90   // In Days
      max = 200        // Total jobs to keep before cleaning
    }
    libs {
      retention = 90   // In Days
      max = 300        // Total jobs to keep before cleaning
    }
  }

  logging {
    threshold = "WARN"
    file {
      folder = "$INSTALL_DATA_FOLDER/${jobserver.name}/logging"
      path = "$folder/jobserver.log"
    }

    logstach {
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.logging?.host}"
      port = 8055
    }
  }

  tac_registration {
    register = true

    // tac references 'tac' configuration above.
    // It used to retrieve the host . port user and password to connect to it
    tac = tac

    // !! IMPORTANT: If Blank, The value will be the concatenation of the hostname and the constant '_jobserver'
    label = ""
    // !! IMPORTANT: If value is blank, the value will be the timezone of the machine where the installer runs.
    timezone = ""

    virtual_servers {
      // 'add_to' is the label of the virtual server to add the current server
      // !! IMPORTANT: If the virtual server doesn't exist it will be created.
      add_to = "VirtualServer_1"
    }
  }
}

// Talend Repository Manager
trm {
  dependencies = []

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "trm"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.build?.host}"
      ports {
        http = 8790
        ajp = 8709
        shutdown = 8705
      }

      webapp {
        name = "org.talend.repositorymanager"
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend Repository Manager 6.4.1"
        description = "Talend Repository Manager is a web-based application delivered with one default account. This account enables you to manage the creation, deletion and edition of all Talend Repository Manager users as well as monitor and manage licenses. Access trm console through http://${TRM.app_server.instance.host}:${TRM.app_server.instance.port}/${TRM.app_server.instance.webapp.name}"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8445
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }

      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}/${webapp.name}"
    }
  }

  database {
    config.password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle" and "sqlserver"
    type = "mysql"

    h2 {
      dependencies = []

      schema = "repository_manager"

      username = "tisadmin"
      password = "bt4AUzTV14kK8FwkcK/BNg==,Encrypt"
      db = "repository_manager"

      url = "jdbc:h2:{0}/WEB-INF/database/$schema;AUTO_SERVER=TRUE;MVCC=TRUE;lock_timeout=15000"
      driver = ""
    }

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 3306
      username = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"

      connect_timeout = "5"

      url = "jdbc:mariadb://${host}:${port}/${schema}?useSSL=falseconnectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 3306
      username = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"

      connect_timeout = "5"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      url = "jdbc:mysql://${host}:${port}/${schema}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
//          "database.driver.Oracle"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      service_name = "repository_manager"

      host = "localhost"
      port = 1521
      username = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"

      connect_timeout = 5

      url = "jdbc:oracle:thin:@$host:$port:$service_name"
      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]
      //!! Important: The database schema must exist when trm starts the first time
      schema = "repository_manager"

      host = "localhost"
      port = 1433
      username = "sa"
      password = "yzuBTeQahXQS7ts8Dh6zeQ==,Encrypt"

      connect_timeout = 5

//      url = "jdbc:jtds:sqlserver://$host:$port/$schema"
      url = "jdbc:jtds:sqlserver://${host}:${port}/${schema};loginTimeout=${connect_timeout}"

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }

  default_account {
    login = "admin@company.com"
    password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    firstname = "admin"
    lastname = "admin"
  }

  local.extract.path = "$INSTALL_DATA_FOLDER/trm/extract"
}

logserver {

  elasticsearch {
    // !! IMPORTANT: If the 'host' value is blank, the current server hostname or IP address will be used.
    network.host = "${HOSTS.logging?.host}"
    http.port = "9200" // Support port range as well. Ex:  http.port = "9200-9300"
    cluster.name = "talend-log-central"
    path.data = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/data"
    path.logs = "$INSTALL_DATA_FOLDER/logserver/elasticsearch/logs"
  }

  logstach {
    path.logs = "$INSTALL_DATA_FOLDER/logserver/logstash/logs"
    input {
      ports {
        tac = tac.logging.logstach.port
        components = 8052
        mdm_server = 8053
        mdm_match = 8054
        jobserver = jobserver.logging.logstach.port
        commandine = cmdline.logging.logstach.port
      }
    }
    output {
      elasticsearch {
        host = logserver.elasticsearch.network.host
        port = logserver.elasticsearch.http.port
      }
    }
  }

  kibana {
    server.host = "0.0.0.0"
    server.port = tac.monitoring.kibana.port

    // WARNING: If elasticsearch http.port is a port range instead of a single one,
    // Kibana es.url property below will be invalid and kibana will fail to start successfully.
    // instead change the value to a constant port value. Ex:
    // es.url = "http://${logserver.elasticsearch.network.host}:9200"
    es.url = "http://${logserver.elasticsearch.network.host}:${logserver.elasticsearch.http.port}"

    path.logs = "$INSTALL_DATA_FOLDER/logserver/kibana/logs"
    logging.dest = "$path.logs/kibana.log" // Or 'stdout' for console output
  }

  service {
    name = "talend-logserver-6.4.1"
    display = "Talend logserver 6.4.1"
    description = "Talend logserver 6.4.1"

    config = HOSTS.services
  }

}

// Talend Continuous Integration Builder
tcib {

  dependencies = [
      "ci.maven",  // !!! MUST be listed before "ci.jenkins"
      "ci.groovy",
      "ci.jenkins"
  ]

  // !! Use only if Jenkins dependency is installed
  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    auto_config = true

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "jenkins"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.ci?.host}"
      ports {
        http = 8095
        ajp = 8609
        shutdown = 8605
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"
      webapp {
        name = "jenkins"
      }

      service {
        name = "${instance.name}"
        display = "Jenkins Server used by Talend CI"
        description = "Jenkins Server used by Talend CI"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8443
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        // No ssl folder defined. It will be created based on the location of jenkins folder.

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }
      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}/${webapp.name}"
    }
  }
}

//-------------------------------------------------
//-------------------------------------------------
//-------------   DATA QUALITY  -------------------
//-------------------------------------------------
//-------------------------------------------------
iam {

  dependencies = []

  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "iam"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.admin?.host}"
      ports {
        http = 9080
        ajp = 9009
        shutdown = 9005
      }

      set_env {
        // See:
        // http://www.baeldung.com/jvm-parameters
        // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
        JAVA_OPTS = [
            '-Xms2g',  // Initial memory allocation
            '-Xmx2g',  // Maximum memory allocation.
            // Garbage collection
            '-XX:+UseG1GC',  // Use G1, recommended for Xmx > 4g
            '-XX:+UseStringDeduplication', // Introduced in Java 8u20.
            //
            '-Djava.awt.headless=true',
            '-Dfile.encoding=UTF-8',
            '-Djava.security.egd=file:/dev/./urandom',
        ]

        SPRING_PROFILES_ACTIVE = 'syncope,onpremise,tac'
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      webapp {
        name = "syncope"
      }

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend Identity and Access Management"
        description = "Talend Identity and Access Management"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 9084
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }
      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}"
    }
  }

  folders {
    home = "${INSTALL_TALEND_FOLDER}/iam"
    config = "${home}/conf"
    clients = "${home}/clients"
  }

  // Database
  database {
    // Databases supported out of the box : "h2", "mariadb", "mysql",  "oracle" and "sqlserver"
    type = "h2"

    h2 {
      dependencies = []

      db_folders = [
          idp    : "${INSTALL_DATA_FOLDER}/iam/idp",
          oidc   : "${INSTALL_DATA_FOLDER}/iam/oidc",
          syncope: "${INSTALL_DATA_FOLDER}/iam/syncope"
      ]

      schemas = [
          idp    : 'idpdb',
          oidc   : 'oidcdb',
          syncope: 'syncopedb'
      ]

      usernames = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      passwords = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      urls = [
          idp    : "jdbc:h2:${iam.database.h2.db_folders.idp}/${iam.database.h2.schemas.idp};DB_CLOSE_DELAY=-1",
          oidc   : "jdbc:h2:${iam.database.h2.db_folders.oidc}/${iam.database.h2.schemas.oidc};DB_CLOSE_DELAY=-1",
          syncope: "jdbc:h2:${iam.database.h2.db_folders.syncope}/${iam.database.h2.schemas.syncope};DB_CLOSE_DELAY=-1"
      ]
      driver = "org.h2.Driver"
    }

    mariadb {
      dependencies = [
          "database.driver.mariadb"
      ]

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 3306

      schemas = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      usernames = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]

      passwords = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]


      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      urls = [
          'idp'    : "jdbc:mariadb://${host}:${port}/${iam.database.mariadb.schemas.idp}?useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}",
          'oidc'   : "jdbc:mariadb://${host}:${port}/${iam.database.mariadb.schemas.oidc}?useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}",
          'syncope': "jdbc:mariadb://${host}:${port}/${iam.database.mariadb.schemas.syncope}?useSSL=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      ]

      driver = "org.mariadb.jdbc.Driver"
    }

    mysql {
      dependencies = [
          "database.driver.mysql"
      ]

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 3306

      schemas = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      usernames = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]

      passwords = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]


      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      // use_ssl= false => To avoid to get connection error if MySQL not set with SSL
      urls = [
          'idp'    : "jdbc:mysql://${host}:${port}/${iam.database.mysql.schemas.idp}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}",
          'oidc'   : "jdbc:mysql://${host}:${port}/${iam.database.mysql.schemas.oidc}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}",
          'syncope': "jdbc:mysql://${host}:${port}/${iam.database.mysql.schemas.syncope}?useSSL=false&verifyServerCertificate=false&connectTimeout=${connect_timeout.toInteger() * 1000}"
      ]

      driver = "com.mysql.jdbc.Driver"
    }

    oracle {
      //For Oracle, the driver need to be provided. It can't be downloaded by the installer.
      dependencies = [
          "database.driver.oracle_temporary" // Use a temporary driver for testing purposes only
          //"database.driver.Oracle"
      ]

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1521

      service_names = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      usernames = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]

      passwords = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]

      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      // Long format
      // url = "jdbc:oracle:thin:@(DESCRIPTION=(CONNECT_TIMEOUT=${connect_timeout})(ADDRESS_LIST=(ADDRESS=(PROTOCOL=tcp)(HOST=${host})(PORT=${port})))(CONNECT_DATA=(SERVICE_NAME=${service_name})))"
      urls = [
          'idp'    : "jdbc:oracle:thin:@${host}:${port}:${iam.database.oracle.service_names.idp}",
          'oidc'   : "jdbc:oracle:thin:@${host}:${port}:${iam.database.oracle.service_names.oidc}",
          'syncope': "jdbc:oracle:thin:@${host}:${port}:${iam.database.oracle.service_names.syncope}"
      ]

      driver = "oracle.jdbc.driver.OracleDriver"
    }

    sqlserver {
      dependencies = [
          "database.driver.sqlserver"
      ]

      //!! Important: The database schema must exist when tac starts the first time
      schema = "${(HOSTS.admin?.database.schema_service) ?: 'tac'}"

      host = "${(HOSTS.admin?.database.host) ?: 'localhost'}"
      port = (HOSTS.admin?.database.port) ?: 1433

      schemas = [
          idp    : 'idp',
          oidc   : 'oidc',
          syncope: 'syncope'
      ]

      usernames = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]

      passwords = [
          'idp'    : 'idp',
          'oidc'   : 'oidc',
          'syncope': 'syncope'
      ]


      connect_timeout = "${(HOSTS.admin?.database.connect_loggin_timeout) ?: 5}"

      urls = [
          'idp'    : "jdbc:jtds:sqlserver://${host}:${port}/${iam.database.sqlserver.schemas.idp};loginTimeout=${connect_timeout}",
          'oidc'   : "jdbc:jtds:sqlserver://${host}:${port}/${iam.database.sqlserver.schemas.oidc};loginTimeout=${connect_timeout}",
          'syncope': "jdbc:jtds:sqlserver://${host}:${port}/${iam.database.sqlserver.schemas.syncope};loginTimeout=${connect_timeout}"
      ]

      driver = "net.sourceforge.jtds.jdbc.Driver"
    }
  }

  security {
    // IDP:
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // Used to retrieve the host, port user and password to connect to it
    tac = tac

    syncope {
      user = 'admin'
      // password default value: 'password'. !! Do not copy this comment at the end of the next line => Cause errors
      password = 'm9Ut0k3oP5pLE2BH1r9xQA==,Encrypt'
    }
  }

  oidc_clients {
    dqdict {
      name = 'DQ Dict API Server'
      id = 'FqtrjyZu7hTsoQ'
      secret = "5yjRGCvDGhv8wru7K-Lp3Q"
      grants = ['authorization_code', 'password']
    }

    tds {
      name = 'TDS OIDC Gateway'
      id = 'tl6K6ac7tSE-LQ'
      secret = "sLbyFKTzM8F0dTL10mHd3A"
      grants = ['authorization_code', 'password', 'refresh_token']
      scopes = 'openid refreshToken'
    }

    tdp {
      name = 'TDP DataPrep'
      id = '64xIVPxviKWSog'
      secret = "9C0zCjp8yS-eZBqEi-KhBQ"
      grants = ['authorization_code', 'password', 'refresh_token']
      scopes = 'openid refreshToken'
    }
  }
}

kafka {
  host = "${HOSTS.dq_common?.dms?.kafka?.host}"
  port = (HOSTS.dq_common?.dms?.kafka?.port) ?: 9092

  folders {
    home = "$INSTALL_DEPENDENCIES_FOLDER/kafka"
    log = "$INSTALL_DATA_FOLDER/kafka/logs"
  }

  zookeeper {
    host = "${HOSTS.dq_common?.dms?.zookeeper?.host}"
    port = (HOSTS.dq_common?.dms?.zookeeper?.port) ?: 2181

    folders {
      data = "$INSTALL_DATA_FOLDER/zookeeper/data"
    }
  }

  service {
    config = HOSTS.services
  }
}

// Talend Dictionary Service
dqdict {
  dependencies = [
      "database.server.mongodb",  // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      "dms.kafka" // !!Mandatory: dms: distributed messaging system
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "dq_dict"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.dq_common?.host}"
      ports {
        http = 8187
        ajp = 8188
        shutdown = 8189
      }

      set_env {
        // See:
        // http://www.baeldung.com/jvm-parameters
        // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
        JAVA_OPTS = [
            '-Xms1g',  // Initial memory allocation
            '-Xmx2g',  // Maximum memory allocation.
            // Garbage collection
            '-XX:+UseG1GC',  // Use G1, recommended for Xmx > 4g
            '-XX:+UseStringDeduplication', // Introduced in Java 8u20.
            //
            '-Djava.awt.headless=true',
            '-Dfile.encoding=UTF-8',
            '-Djava.security.egd=file:/dev/./urandom'
        ]
      }
      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      webapp {
        name = "dqdict"
      }

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend DQ Dictionary"
        description = "Talend Data Quality Dictionary Service"

        config = HOSTS.services
      }

      ssl {
        enable = false
        port = 8184
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }
      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
//      url  = "http${(ssl.enable)?'s':''}://${(host)?:'localhost'}:${(ssl.enable)?ssl.port:ports.http}/${webapp.name}"
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}"
    }
  }

  // MongoDB database
  database {
    mongodb = HOSTS.dq_common.mongodb

    database = 'dqdict'

    username = 'dqdict-user'
    // Default password: 'duser'
    password = '5va8SHm7h2uOFduI8ukuYg==,Encrypt'

    service {
      config = HOSTS.services
    }
  }

  security {
    // Authentication and Authorisation
    // iam references 'iam' configuration above.
    iam = iam
  }

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}"
    app = "${home}/app"
    config = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}/conf"
    context = "${config}/Catalina/${dqdict.app_server.instance.host}"

    root_cmdline = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}_cmdline"

    root_database = "${INSTALL_TALEND_FOLDER}/${dqdict.app_server.instance.name}_database"

    logs = "$INSTALL_DATA_FOLDER/${dqdict.app_server.instance.name}/logs"
    lucene = "$INSTALL_DATA_FOLDER/${dqdict.app_server.instance.name}/lucene"
  }

  // Distributed Messaging System
  dms = kafka
}

// Talend Data Stewardship
tds {

  dependencies = [
      "database.client.mongo_shell"
      // Already provided by dqdict
//      "database.server.mongodb", // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      // Already provided by dqdict
//      "dms.kafka" // !!Mandatory: dms: distributed messaging system.
  ]

  // Web Application
  app_server {
    dependencies = [
        "app_server.tomcat_8"
    ]

    // Credential for the application server (For Tomcat, update conf/tomcat-users.xml file)
    credentials {
      user = "admin"
      password = "oV0/gYJwoWqvorcePQ+Mrg==,Encrypt"
    }

    instance {
      name = "tds"
      // !! IMPORTANT: If the 'host' value is not defined, the current server hostname or IP address will be used.
      host = "${HOSTS.tds?.host}"
      ports {
        http = 19999
        ajp = 19928
        shutdown = 19924
      }

      set_env {
        // See:
        // http://www.baeldung.com/jvm-parameters
        // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
        JAVA_OPTS = [
            '-Xms1g',  // Initial memory allocation
            '-Xmx4g',  // Maximum memory allocation.
            // Garbage collection
            '-XX:+UseG1GC',  // Use G1, recommended for Xmx > 4g
            '-XX:+UseStringDeduplication', // Introduced in Java 8u20.
            //
            '-Djava.awt.headless=true',
            '-Dfile.encoding=UTF-8',
            '-Djava.security.egd=file:/dev/./urandom'
        ]
      }

      // Logs folder location. Set value to "" blank to use the default location (usually under the instance folder)
      logs = "$INSTALL_DATA_FOLDER/$name/logs"
      // Temp folder location. Set value to "" blank to use the default location (usually under the instance folder)
      temp = "$INSTALL_DATA_FOLDER/$name/temp"
      // Work folder location. Set value to "" blank to use the default location (usually under the instance folder)
      work = "$INSTALL_DATA_FOLDER/$name/work"

      webapp {
        name = "tds"
      }

      service {
        name = "talend-${instance.name}-6.4.1"
        display = "Talend Data Stewardship"
        description = "Talend Data Stewardship"

        config = HOSTS.services
      }

      // !! Not used in version 6.4.1
      ssl {
        enable = false
        port = 19944
        // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
        enforce = true

        folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

        keystore {
          type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
          // keystore password
          store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

          // self-signed certificate password:
          // !! Important: for Tomcat, key.password MUST be the same as the keystore password
          key.password = "$store.password"

          // Path & the installer file name to generate
          path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

          // -- Self-Signed certificate --
          // Default value: based on instance name
          alias = "talend_${instance.name}"

          validity = 365 // In days

          // Distinguish name: Update accordingly
          dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

          exported_certificate = "${ssl.folder}/${instance.name}.cert"
        }
      }
      // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
      url = "http${(ssl.enable) ? 's' : ''}://${(host) ?: 'localhost'}:${(ssl.enable) ? ssl.port : ports.http}"
    }
  }

  database {
    mongodb = HOSTS.tds.mongodb

    database = 'tds'

    username = 'tds-user'
    // Default password: 'dsuser'
    password = '/SIEVFcBvo3sYUmnbi6wmg==,Encrypt'

    service {
      config = HOSTS.services
    }
  }

  security {
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // Used to retrieve the host, port user and password to connect to it
    tac = tac

    // SSO
    iam = iam

    // Default TDS user. create = true => TUI will create the TDS user on TAC.
    tds_user {
      create = true

      login = 'tds_user@company.com'
      // Default value for password: 'duser'
      password = '5va8SHm7h2uOFduI8ukuYg==,Encrypt'

      // The followings user attributes can be updated after the creation
      firstname = 'tds_user'
      lastname = 'tds_user'

      type = 'DQ' // Possible value: 'DQ', 'DI', 'NPA', ...
      // Add/Remove a role if necessary
      userRoles = ['Operation manager', 'Viewer']  // Additional available values: 'Administrator', 'Designer'
      tdsRoles = ['Data Steward', 'Campaign Owner']

      fail_on_error = false
    }
  }

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${tds.app_server.instance.name}"
    app = "${home}/app"
    config = "${INSTALL_TALEND_FOLDER}/${tds.app_server.instance.name}/conf"
    context = "${config}/Catalina/${tds.app_server.instance.host}"

    logs = "$INSTALL_DATA_FOLDER/${tds.app_server.instance.name}/logs"
    data = "$INSTALL_DATA_FOLDER/${tds.app_server.instance.name}/data"
  }

  // Distributed Messaging System
//  dms = kafka
  dqdict = dqdict
}

sparkjs {
  name = "sparkjs"

  host = "${HOSTS.tdp_bd?.sparkjs?.host}"
  port = 8098

  folders {
    home = "${INSTALL_TALEND_FOLDER}/${name}"
    logs = "${INSTALL_DATA_FOLDER}/${name}/logs"
  }

  database {
    type = 'h2' // Only type supported at this time
    host = 'localhost'
    port = 8099
  }

  spark {
    hadoop_conf_dir = "/path/to/hadoop/conf"
    yarn_conf_dir = spark.hadoop_conf_dir
    krb5_config = "/etc/krb5.conf"
  }
}

tcomp {

  instance {
    name = "tcomp"

    folders {
      home = "${INSTALL_TALEND_FOLDER}/${instance.name}"
      m2   = "${INSTALL_TALEND_FOLDER}/${instance.name}/.m2"
      logs = "${INSTALL_DATA_FOLDER}/${instance.name}/logs"
    }

    host = "${(HOSTS.tdp_bd?.tcomp.host) ?: 'localhost'}"

    ports {
      http = 8989
    }

    contextPath = '/tcomp'

    set_env {
      // See:
      // http://www.baeldung.com/jvm-parameters
      // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
      JAVA_OPTS = [
          '-Xms2g',  // Initial memory allocation
          '-Dfile.encoding=UTF-8',
          "-Dorg.ops4j.pax.url.mvn.localRepository=\"${folders.m2}\"",
          "-Dcomponent.default.config.folder=\"${folders.home}/config/default\""
      ]
    }

    service {
      name = "talend-${name}-6.4.1"
      display = "Talend TCOMP"
      description = "Talend Component Web Service"

      config = HOSTS.services
    }

    // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
    url = "http://${host}:${ports.http}${contextPath}"
  }

  krb5_config = ""
  hadoop_conf_dir = ""
}

streamsrunner {
  name = "streams_runner"

  host = "${HOSTS.tdp_bd?.streamsrunner?.host}"

  port = 9060
  contextPath = '/v1'
  url = "http://${host}:${port}${contextPath}"

  _sparkjs {
    config = sparkjs
  }

  kerberos {
    principal = ""
    keytab_path = ""
  }

  hdfs {
    url = "hdfs://"
  }
}

tdp {

  dependencies = [
      // Already provided by dqdict
//      "database.server.mongodb", // Remove line if use an external MongoDB Server. See 'database' section below to set connection info.
      // Already provided by dqdict
//      "dms.kafka" // !!Mandatory: dms: distributed messaging system.
  ]


  // Web Application
  instance {
    name = "tdp"

    folders {
      home = "${INSTALL_TALEND_FOLDER}/${instance.name}"
      data = "${INSTALL_DATA_FOLDER}/${instance.name}/data"
      // Location of  dataquality.indexes.file.location
      semantic = "${data}/org.talend.dataquality.semantic"
      logs = "$INSTALL_DATA_FOLDER/${instance.name}/logs"
    }

    host = "${HOSTS.tdp?.host}"

    ports {
      http = 9999
      backend = tcomp.port
    }

    set_env {
      // See:
      // http://www.baeldung.com/jvm-parameters
      // http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
      JAVA_OPTS = [
          '-Xms2g',  // Initial memory allocation
          '-Dfile.encoding=UTF-8'
      ]
    }

    service {
      name = "talend-${name}-6.4.1"
      display = "Talend DataPrep"
      description = "Talend Data Preparation"

      config = HOSTS.services
    }

    ssl {
      enable = false
      port = 8443
      // Info: If enforce equals true, all http requests will be redirected to the ssl port automatically
      enforce = true

      folder = "$INSTALL_TALEND_FOLDER/${instance.name}/ssl_config"

      keystore {
        type = 'jks' // or 'pkcs12'. Default 'jks' for java <= 8; 'pkcs12' for Java 9
        // keystore password
        store.password = "aYfBEdcXYP3t9pofaispXA==,Encrypt"

        // self-signed certificate password:
        // !! Important: for Tomcat, key.password MUST be the same as the keystore password
        key.password = "$store.password"

        // Path & the installer file name to generate
        path = "$INSTALL_TALEND_FOLDER/${instance.name}/conf/${instance.name}_sslkeystore.${('pkcs12'=="$type")? 'p12': 'jks'}"

        // -- Self-Signed certificate --
        // Default value: based on instance name
        alias = "talend_${instance.name}"

        validity = 365 // In days

        // Distinguish name: Update accordingly
        dname = "CN=${instance.host}, OU=CustomerSuccess, O=Talend Inc., L=Redwood City, S=California, C=US"

        exported_certificate = "${ssl.folder}/${instance.name}.cert"
      }
    }

    // IMPORTANT: Do not modify directly. Change the individual parameters (host, port, ...) instead
    url = "http://${(host) ?: 'localhost'}:${ports.http}"
  }

  // MongoDB database
  database {
    mongodb = HOSTS.dq_common.mongodb

    database = 'tdp'

    username = 'dataprep-user'
    // Default password: 'dprep'
    password = 'mpg8cbhM8S7b0MChGW+f0A==,Encrypt'
  }

  security {
    // Authentication and Authorisation
    // tac references 'tac' configuration above.
    // Used to retrieve the host, port user and password to connect to it
    tac = tac

    // SSO
    iam = iam

    // Default TDS user. create = true => TUI will create the DataPrep user on TAC.
    tdp_user {
      // Create using metaservlet.
      // TAC must be up & running when installing Dataprep
      create = true

      login = "tdp_user@company.com"
      password = "mpg8cbhM8S7b0MChGW+f0A==,Encrypt"

      firstname = "tdp_user"
      lastname = "tdp_user"

      type = 'DQ' // Possible value: 'DQ', 'DI', 'NPA', ...
      // Add/Remove a role if necessary
      userRoles = ['Administrator', 'Operation manager'] // Additional available values: 'Designer', 'viewer'
      tdpRoles = ['Dataset Manager'] // Additional available values: 'Administrator', 'Data Preparator'

      fail_on_error = false
    }

  }

  // For Talend Dictionary Service
  _dqdict {
    enable = true

    config = dqdict
  }

  _tcomp {
    enable = false

    config = tcomp
  }

  _sparkjs {
    enable = false

    config = sparkjs
  }

  _streamsrunner {
    enable = false

    config = streamsrunner
  }
}
