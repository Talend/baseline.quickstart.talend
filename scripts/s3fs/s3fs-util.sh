#!/usr/bin/env bash

set -u

[ "${S3FS_UTIL_FLAG:-0}" -gt 0 ] && return 0

export S3FS_UTIL_FLAG=1

s3fs_util_script_path=$(readlink -e "${BASH_SOURCE[0]}")
s3fs_util_script_dir="${s3fs_util_script_path%/*}"

# shellcheck source=../util/util.sh
source "${s3fs_util_script_dir}/../util/util.sh"


#--------------
#
# selects s3fs pre-req installer, either yum or apt
#
#--------------

function s3fs_builder() {
    debugLog "BEGIN"

    local package_manager="${1}"

    required package_manager

    [ ! "${package_manager}" == "yum" ] && [ ! "${package_manager}" == "apt" ] && errorMessage "invalid argument: package_manager valid values are yum or apt" && return 1

    "s3fs_build_${package_manager}"

    debugLog "END"
}


#--------------
#
# s3fs pre-req yum installer
#
#--------------

function s3fs_build_yum() {
    debugLog "BEGIN"
    yum -y install automake fuse fuse-devel gcc-c++ git libcurl-devel libxml2-devel make openssl-devel
    debugLog "END"
}


#--------------
#
# s3fs pre-req apt installer
#
#--------------

function s3fs_build_apt() {
    debugLog "BEGIN"
    apt-get -y install build-essential libfuse-dev libcurl4-openssl-dev libxml2-dev mime-support automake libtool
    apt-get -y install pkg-config libssl-dev
    debugLog "END"
}


#--------------
#
# return true (0) if s3fs is installed, else return false (1)
#
#--------------

function is_s3fs_installed() {
    if [ -f "/usr/local/bin/s3fs" ]; then
        [ ! -L "/usr/bin/s3fs" ] && ln -s /usr/local/bin/s3fs /usr/bin/s3fs
        true
    else
        false
    fi
}


#--------------
#
# retrieve specified version of s3fs from git release and unzip
#
#--------------

function get_s3fs() {
    local _tar_file_ref="${1:-}"
    local s3fs_version="${2:-1.82}"

    required _tar_file_ref s3fs_version

    local organization="s3fs-fuse"
    local repo_name="s3fs-fuse"
    local branch="v${s3fs_version}"
    local out_file="${branch}.tar.gz"
    assign "${_tar_file_ref}" "${out_file}"

# this header is not needed since we do not need to login into git to download a releae
#        --header="Authorization: token ${git_token}" \
    wget -O "${out_file}" \
        --header="Accept:application/vnd.github.v3.raw" \
        "https://api.github.com/repos/${organization}/${repo_name}/tarball/${branch}"
    mkdir -p s3fs
    tar --strip-components=1 -C ./s3fs -xzvf "${out_file}"
}


#--------------
#
# build s3fs from source
#
#--------------

function s3fs_build() {
    debugLog "BEGIN"

    local s3fs_dir="${1:-}"
    local package_manager="${2:-yum}"

    required s3fs_dir

    debugVar s3fs_dir

    if is_s3fs_installed ; then
       debugLog "s3fs already installed"
       return 0
    else
       debugLog "installing s3fs"
    fi

    s3fs_builder "${package_manager}"

    debugLog "pushd"
    if pushd "${s3fs_dir}"; then
        debugLog "pushd success: current dir: ${PWD}"
    else
        errorMessage "invalid s3fs directory ${s3fs_dir}"
        return 1
    fi

    debugLog "autogen"
    ./autogen.sh
    debugLog "configure"
    ./configure
    debugLog "make"
    make
    debugLog "make install"
    make install

    debugLog "create symbolic link"
    ln -s /usr/local/bin/s3fs /usr/bin/s3fs

    debugLog "popd"
    if popd; then
        debugLog "popd success: current dir: ${PWD}"
    else
        debugLog "FAILURE in popd"
        return 1
    fi
    debugLog "END"
    return 0
}


#--------------
#
# configure s3fs with S3 credentials
#
#--------------

function s3fs_config() {
    debugLog "BEGIN"

    local access_key="${1:-${TALEND_FACTORY_ACCESS_KEY:-}}"
    local secret_key="${2:-${TALEND_FACTORY_SECRET_KEY:-}}"

    debugVar access_key; debugVar secret_key

    local credentials_file=~/.passwd-s3fs
    sed -i "s/# user_allow_other/user_allow_other/g" /etc/fuse.conf

    if [ -n "${access_key}" ] && [ -n "${secret_key}" ]; then
        echo "${access_key}:${secret_key}" > "${credentials_file}"
        chmod 600 "${credentials_file}"
        debugLog "credential file ${credentials_file} created"
    elif [ ! -f "${credentials_file}" ]; then
        warningLog "Credential file ${credentials_file} not set."
    else
        # credentials_file will be generated by cloud formation
        debugLog "Credential file ${credentials_file} found."
    fi
    debugLog "END"
}


#--------------
#
# mount an s3 bucket using s3fs
#
#--------------

function s3fs_mount() {

    local s3_bucket="${1:-}"
    local s3_path="${2:-/}"
    local s3_mount_dir="${3:-${s3_mount_dir:-${TALEND_FACTORY_REPO_MOUNT_DIR:-/opt/repo}}}"
    local s3_mount_root="${4:-${s3_mount_dir}}"
    local s3fs_umask="${5:-037}"
    local iam_role="${6:-auto}"
    local target_owner="${7:-ec2-user}"

    required s3_bucket s3_path s3_mount_dir s3_mount_root s3fs_umask target_owner

    debugVar s3_bucket; debugVar s3_path; debugVar s3_mount_dir; debugVar s3_mount_root; debugVar s3fs_umask; debugVar iam_role; debugVar target_owner

    try mkdir -p "${s3_mount_dir}"

    chown -R "${target_owner}:${target_owner}" "${s3_mount_root}"

    [ -n "${s3_path}" ] && [ "${s3_path:0:1}" != "/" ] && s3_path="/${s3_path}"
    [ -n "${s3_path}" ] && s3_path=":${s3_path}"

    debugVar s3_path

    if [ "${iam_role}" == "none" ]; then
        debugLog "s3fs ${s3_bucket}${s3_path} ${s3_mount_dir} -o allow_other -o mp_umask=${s3fs_umask}"
        try s3fs "${s3_bucket}${s3_path}" "${s3_mount_dir}" -o allow_other -o mp_umask="${s3fs_umask}"
    else
        debugLog "s3fs ${s3_bucket}${s3_path} ${s3_mount_dir} -o iam_role=auto -o allow_other -o mp_umask=${s3fs_umask} -ouse_cache=/tmp"
        try s3fs "${s3_bucket}${s3_path}" "${s3_mount_dir}" -o iam_role="${iam_role}" -o allow_other -o mp_umask="${s3fs_umask}" -ouse_cache=/tmp
    fi
}


#--------------
#
# set file attributes for files on an s3fs mount
#
#--------------

function s3fs_file_attrib() {

    local filepath="${1:-}"
    local perm="${2:-640}"
    local target_owner="${3:-${target_owner:-ec2-user}}"

    required filepath perm owner

    debugLog "s3fs-chmod: ${filepath} ${target_owner}:${target_owner} ${perm}"

    chown "${target_owner}:${target_owner}" "${filepath}"
    chmod "${perm}" "${filepath}"
}


#--------------
#
# set directory attributes for directories on an s3fs mount
#
#--------------

function s3fs_dir_attrib() {

    local target_owner="${1:-ec2-user}"
    local mount_dir="${2:-/opt/repo}"

    local mydir_list
    mydir_list=$(ls -d "${mount_dir}"/*/)
    for subdir in ${mydir_list}
    do
        echo "processing ${subdir}"
        chown "${target_owner}:${target_owner}" "${subdir}"
        chmod 750 "${subdir}"
        find "${subdir}" -type d -exec chown "${target_owner}:${target_owner}" {} \;
        find "${subdir}" -type d -exec chmod 750 {} \;
        find "${subdir}" -type f -name "*" -exec chown "${target_owner}:${target_owner}" {} \;
        find "${subdir}" -type f -name "*" -exec chmod 440 {} \;
        find "${subdir}" -type f -name "*.sh" -exec chmod 550 {} \;
    done
}
